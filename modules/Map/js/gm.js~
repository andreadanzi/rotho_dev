
function initialize() {
	directionsDisplay = new google.maps.DirectionsRenderer();
	
	var VT_TYPE = "VTStyle";
	// Create and Center a Map
    	var myOptions = {
      		zoom: 6,
      		center: home_center,
		mapTypeControlOptions: {
			mapTypeIds: [VT_TYPE,google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE, google.maps.MapTypeId.TERRAIN]
		},
      		mapTypeId:VT_TYPE,
		streetViewControl: true
    	};

	var stylez = [ { featureType: "poi", elementType: "all", stylers: [ { visibility: "off" } ] },{ featureType: "landscape.natural", elementType: "all", stylers: [ { visibility: "simplified" }, { hue: "#0C4F00" } ] },{ featureType: "road", elementType: "all", stylers: [ { visibility: "off" }] }, { featureType: "landscape.man_made", elementType: "all", stylers: [ { visibility: "simplified" }, { hue: "#EF2C2C" } ] },{ featureType: "administrative", elementType: "geometry",stylers: [ { hue: "#0088ff" }, { saturation: 80 }, { lightness: -17 } ] }];


    	map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

	var styledMapOptions = {map:map,name:"VT Style"};

	var rothoMap =  new google.maps.StyledMapType(stylez,styledMapOptions);
		
	
	directionsDisplay.setMap(map);
	directionsDisplay.setPanel(document.getElementById("route"));
	
	map.mapTypes.set(VT_TYPE, rothoMap);
	map.setMapTypeId(VT_TYPE);
	
	refreshMapCluster();

	initializeSlider();	
	
	var domElement = document.getElementById('type1');
	google.maps.event.addDomListener(domElement, 'click',  function() { refreshMap2(this.id, this.checked);} );
	domElement = document.getElementById('type2');
	google.maps.event.addDomListener(domElement, 'click',  function() { refreshMap2(this.id, this.checked);} );
	domElement = document.getElementById('type3');
	google.maps.event.addDomListener(domElement, 'click',  function() { refreshMap2(this.id, this.checked);} );
	domElement = document.getElementById('clust1');
	google.maps.event.addDomListener(domElement, 'click',  function() { refreshMap2(this.id, this.checked);} );
	domElement = document.getElementById('clust2');
	google.maps.event.addDomListener(domElement, 'click',  function() { refreshMap2(this.id, this.checked);} );
	//updateValueFilterContainer
	domElement = document.getElementById('valueSel');
	google.maps.event.addDomListener(domElement, 'onchange',  function() { updateValueFilterContainer(this);} );
}

function clearClusters(e) {
	e.preventDefault();
	e.stopPropagation();
	markerCluster.clearMarkers();
}

      
function getFusionMarker(pos, name, type, desc, icon) { // Andrea Danzi aggiunto type - 24.03.2012
	var infowindow = new google.maps.InfoWindow({
    		content: desc
	});

	var image = new google.maps.MarkerImage( // Andrea Danzi aggiunto custom marker - 24.03.2012
	  icon,
	  new google.maps.Size(32,37),
	  new google.maps.Point(0,0),
	  new google.maps.Point(16,37)
	);

	var shadow = new google.maps.MarkerImage( // Andrea Danzi aggiunto custom marker - 24.03.2012
	  'modules/Map/img/shadow.png',
	  new google.maps.Size(54,37),
	  new google.maps.Point(0,0),
	  new google.maps.Point(16,37)
	);

	var shape = { // Andrea Danzi aggiunto custom marker - 24.03.2012
	  coord: [29,0,30,1,31,2,31,3,31,4,31,5,31,6,31,7,31,8,31,9,31,10,31,11,31,12,31,13,31,14,31,15,31,16,31,17,31,18,31,19,31,20,31,21,31,22,31,23,31,24,31,25,31,26,31,27,31,28,31,29,30,30,29,31,23,32,22,33,21,34,20,35,19,36,12,36,11,35,10,34,9,33,8,32,2,31,1,30,0,29,0,28,0,27,0,26,0,25,0,24,0,23,0,22,0,21,0,20,0,19,0,18,0,17,0,16,0,15,0,14,0,13,0,12,0,11,0,10,0,9,0,8,0,7,0,6,0,5,0,4,0,3,0,2,1,1,2,0,29,0],
	  type: 'poly'
	};


	var marker = new google.maps.Marker({
    		position: pos,
   		map: map,
		icon: image, // Andrea Danzi aggiunto custom marker - 24.03.2012
		shadow: shadow, // Andrea Danzi aggiunto custom marker - 24.03.2012
		shape: shape, // Andrea Danzi aggiunto custom marker - 24.03.2012
    		title: name + " it's a " + type
	});

	google.maps.event.addListener(marker, 'click', function() {
  		infowindow.open(map,marker);
	});

	return marker;
}


      
function getMarker(pos, name, type, desc, icon, lmap) { // Andrea Danzi aggiunto type - 24.03.2012
	var infowindow = new google.maps.InfoWindow({
    		content: desc
	});

	var image = new google.maps.MarkerImage( // Andrea Danzi aggiunto custom marker - 24.03.2012
	  icon,
	  new google.maps.Size(32,37),
	  new google.maps.Point(0,0),
	  new google.maps.Point(16,37)
	);

	var shadow = new google.maps.MarkerImage( // Andrea Danzi aggiunto custom marker - 24.03.2012
	  'modules/Map/img/shadow.png',
	  new google.maps.Size(54,37),
	  new google.maps.Point(0,0),
	  new google.maps.Point(16,37)
	);

	var shape = { // Andrea Danzi aggiunto custom marker - 24.03.2012
	  coord: [29,0,30,1,31,2,31,3,31,4,31,5,31,6,31,7,31,8,31,9,31,10,31,11,31,12,31,13,31,14,31,15,31,16,31,17,31,18,31,19,31,20,31,21,31,22,31,23,31,24,31,25,31,26,31,27,31,28,31,29,30,30,29,31,23,32,22,33,21,34,20,35,19,36,12,36,11,35,10,34,9,33,8,32,2,31,1,30,0,29,0,28,0,27,0,26,0,25,0,24,0,23,0,22,0,21,0,20,0,19,0,18,0,17,0,16,0,15,0,14,0,13,0,12,0,11,0,10,0,9,0,8,0,7,0,6,0,5,0,4,0,3,0,2,1,1,2,0,29,0],
	  type: 'poly'
	};

	
	var marker = new google.maps.Marker({
    		position: pos,
   		map: map,
		icon: image, // Andrea Danzi aggiunto custom marker - 24.03.2012
		shadow: shadow, // Andrea Danzi aggiunto custom marker - 24.03.2012
		shape: shape, // Andrea Danzi aggiunto custom marker - 24.03.2012
    		title: name + " it's a " + type
	});

	local_markersArray.push(marker);
	google.maps.event.addListener(marker, 'click', function() {
  		infowindow.open(map,marker);
	});

	return marker;
}


function getDescription(id, pos, name, type, map_value, city, extra)
{
	var html = "";
	switch(module)
	{
		case "Accounts": 
			html += "<br/><b><span style='float: right'><a href='index.php?module="+module+"&action=DetailView&record="+id+"'>"+name+"</a></b>";
			break;
		case "Leads": 
			html += "<br/><b><span style='float: right'><a href='index.php?module="+module+"&action=DetailView&record="+id+"'>"+name+"</a></b>";
			break;
		case "SalesOrder": 
			html += "<br/><b><span style='float: right'><a href='index.php?action=CallRelatedList&module=Accounts&selected_header=Sales Order&relation_id=4&record="+id+"'>"+name+"</a></b>";
			break;
		case "HelpDesk":
			html += "<br/><b><span style='float: right'><a href='index.php?action=CallRelatedList&module=Contacts&selected_header=HelpDesk&relation_id=21&record="+id+"'>"+name+"</a></b>";
			break;
		case "Potentials": 
			html += "<br/><b><span style='float: right'><a href='index.php?action=CallRelatedList&module=Accounts&selected_header=Potentials&relation_id=2&record="+id+"'>"+name+"</a></b>";
			break;
	}
	if(type)
	{
		html += "<br/>"+type;
	}
	if(map_value)
	{
		html += "<br/>"+numberToCurrency(map_value); // if(module!="HelpDesk") 
	}
	
	if(extra)
	{
		html += "<br/><br/>"+extra;
	}

	html += "<br/><a onClick='loadDirection(\""+pos.lat()+","+pos.lng()+"\",\""+name+"\",\""+city+"\")' href='javascript:void(0)'>"+direction_lbl+"</a>";
	html += "<span style='float: right'><a href='index.php?module=Map&file=update&action=MapAjax&id="+id+"&show="+module+"'>"+reload_lbl+"</a></span>";
	//html += "<span style='float: right'><a href='index.php?module="+module+"&action=DetailView&record="+id+"'>View</a></span>";

	// index.php?module=Accounts&action=DetailView&record=154
	return html;
}

function getMarkerFromResults(sType) { // Andrea Danzi aggiunto custom marker - 24.03.2012
	if (sType) {
		var sIcon = "modules/Map/img/symbol_pi.png";
		if(module=="Leads")
		{
			var firstChar = sType.substring(0,1).toLowerCase();
			sIcon = "modules/Map/img/letter_"+ firstChar +".png";
		}
		else
		{
			switch(sType)
			{
				case "Reseller": // "RC / CARP" "RD / DIST" "RS / SAFE" "RP / PROG" "RE / ALTRO" "RC / DIST" "RC / PROG" "---" "-" 
				  sIcon = "modules/Map/img/letter_r.png";
				  break;
				case "Competitor":
				  sIcon = "modules/Map/img/letter_c.png";
				  break;
				case "Partner":
				  sIcon = "modules/Map/img/letter_p.png";
				  break;
				case "Other":
				  sIcon = "modules/Map/img/letter_o.png";
				  break;
				case "RC / CARP":
				  sIcon = "modules/Map/img/rc-carp.png";
				  break;
				case "RD / DIST":
				  sIcon = "modules/Map/img/rd-dist.png";
				  break;
				case "RS / SAFE":
				  sIcon = "modules/Map/img/rs-safe.png";
				  break;
				case "RP / PROG":
				  sIcon = "modules/Map/img/rp-prog.png";
				  break;
				case "RE / ALTRO":
				  sIcon = "modules/Map/img/letter_a.png";
				  break;
				case "RC / DIST":
				  sIcon = "modules/Map/img/rc-dist.png";
				  break;
				case "RC / PROG":
				  sIcon = "modules/Map/img/rc-prog.png";
				  break;
				case "---":
				  sIcon = "modules/Map/img/symbol_minus.png";
				  break;
				case "-":
				  sIcon = "modules/Map/img/symbol_minus.png";
				  break;
				default:
				  sIcon = "modules/Map/img/letter_d.png";
			}
		}
		return sIcon;
	}
	else {
		return '';
	}
}

function loadDirection(location,name,city)
{
	to = location;
	var request = {
    		origin:from, 
    		destination:to,
    		travelMode: google.maps.DirectionsTravelMode.DRIVING
  	};
  	directionsService.route(request, function(response, status) {
    		if (status == google.maps.DirectionsStatus.OK) {
      			directionsDisplay.setDirections(response);
  		}
	});	
	var ddesc = document.getElementById("desc");
	ddesc.innerHTML = from_lbl+": <span style='font-weight: bold'>"+baseName+" - "+baseCity+"</span> <span style='color:grey; font-size: smaller'>("+head_lbl+")</span><br/>"+to_lbl+": &nbsp;<span style='font-weight: bold'>"+name+" - "+city+"</span>";
}

function restore()
{
	var ddesc = document.getElementById("desc");
	ddesc.innerHTML = "";
	directionsDisplay.setMap(null);
	var r = document.getElementById("route");
	r.innerHTML = "";
}

function clearOverlays() {
  if (local_markersArray) {
    for (var i = 0; i < local_markersArray.length; i++ ) {
      local_markersArray[i].setMap(null);
    }
  }
  if (local_circleArray) {
    for (var i = 0; i < local_circleArray.length; i++ ) {
      local_circleArray[i].setMap(null);
    }
  }
	
}


function refreshMap2(name, value) {
	
	clearOverlays();	
	if(name=='clust2') clusterRequest = 'Disable';
	if(name=='clust1') clusterRequest = 'Enable';
	if(name=='type1') type_or_valueRequest = 'type';
	if(name=='type2') type_or_valueRequest = 'value';
	if(name=='type3') type_or_valueRequest = 'only_value';
	refreshMapCluster();
}

function refreshMapCluster() {
	if (markerCluster) {
        	markerCluster.clearMarkers();
        }
	local_markersArray = [];
	for (var j in resultLayer) 
	{
		var result = resultLayer[j];
		if(fusion_value > result["map_value"]) continue;
		var pos = new google.maps.LatLng(result["pos"][0], result["pos"][1]);
		var contentString = getDescription(j, pos ,result["name"] ,result["type"] ,result["map_value"],result["city"],result["extra"]);
		if(type_or_valueRequest != 'only_value')
		{
			// pos, name, type, desc, icon
			var marker = getMarker(pos,result["name"],result["type"],contentString,getMarkerFromResults(result["type"]));
		}
		// Si prende il valore 
		if(type_or_valueRequest!="type" )
		{
			 createCircle(result["map_value"],pos,result["name"],contentString);
		}
	}
	// aggiungere la home
	
	var myMarker = getMarker(basePos,baseName,"it's me!",baseDesc,"modules/Map/img/letter_r.png");
	if(clusterRequest=='Enable') {
		markerCluster = new MarkerClusterer(map, local_markersArray);
	}
}

function refreshMap() {
	if (markerCluster) {
        	markerCluster.clearMarkers();
        }
	local_markersArray = [];
	for (var j in resultLayer) 
	{
		var result = resultLayer[j];
		var pos = new google.maps.LatLng(result["pos"][0], result["pos"][1]);
		var contentString = getDescription(j, pos ,result["name"] ,result["type"] ,result["map_value"],result["city"],result["extra"]);
		if(type_or_valueRequest != 'only_value')
		{
			
			// pos, name, type, desc, icon
			var marker = getMarker(pos,result["name"],result["type"],contentString,getMarkerFromResults(result["type"]));
		}
		// Si prende il valore 
		if(type_or_valueRequest!="type" )
		{
			 createCircle(result["map_value"],pos,result["name"],contentString);
		}
	}
	// aggiungere la home
	var myMarker = getMarker(basePos,baseName,"it's me!",baseDesc,"modules/Map/img/letter_r.png");
	if(clusterRequest=='Enable') {
		markerCluster = new MarkerClusterer(map, local_markersArray);
	}
}

function numberToCurrency(number) {

    var currencySymbol     = '€';
    var thousandsSeparator = ',';

    number = stripDollarSign(number);
    number = isNaN(number) || number == '' || number == null ? 0.00 : number;
    var numberStr = parseFloat(number).toFixed(2).toString();
    var numberFormatted = new Array(numberStr.slice(-3));   // this returns the decimal and cents
    numberStr = numberStr.substring(0, numberStr.length-3); // this removes the decimal and cents
    /*
     * Why is there an `unshift()` function, but no `shift()`?
     * Also, a `pop()` function would be handy here.
     */
    while (numberStr.length > 3) {
        numberFormatted.unshift(numberStr.slice(-3)); // this prepends the last three digits to `numberFormatted`
        numberFormatted.unshift(thousandsSeparator); // this prepends the thousandsSeparator to `numberFormatted`
        numberStr = numberStr.substring(0, numberStr.length-3);  // this removes the last three digits
    }
    numberFormatted.unshift(numberStr); // there are less than three digits in numberStr, so prepend them
    if(module!="HelpDesk") numberFormatted.unshift(currencySymbol); // prepend the currencySymbol

    return numberFormatted.join(''); // put it all together
}

function stripDollarSign(s) {
    if (typeof s == 'string') { s = s.replace(/\€/g, ''); }
    return s;
}

function createCircle(mapValue, pos, name, desc)
{	
	
	var displayRadius = Math.log(mapValue)*400;
	if (mapValue < 10) displayRadius = Math.log(10)*400;
	switch(module) // TODO: qui bisogna decidere se allaragre solo il raggio dei nodi in caso di Ordini di Venita o anche il valore in ingresso map_value
	{
		case "Accounts": 
			displayRadius = displayRadius;
			break;
		case "SalesOrder": 
			displayRadius = displayRadius*2;
			break;
		case "Leads": 
			displayRadius = displayRadius*3;
			break;
	}
	var nStrokeOpacity = 0.7;
	var nFillOpacity = 0.35;
	var fillColorForNumbers = "#D6FF2F";
	var sStrokeColor = "#9F9745";
	if( mapValue < 1000 ) 
	{
		fillColorForNumbers = "#D6FF2F";
		sStrokeColor="#00AF07";
		nStrokeOpacity = 0.5;
	}
	else if( mapValue >= 1000 &&  mapValue < 10000 )
	{
		fillColorForNumbers = "#00AF07";
		sStrokeColor="#00ECFF";
		nStrokeOpacity = 0.6;
	}
	else if( mapValue >= 10000 &&  mapValue < 100000 )
	{
		fillColorForNumbers = "#00ECFF";
		sStrokeColor = "#0069BF";
	}
	else if( mapValue >= 100000 &&  mapValue < 1000000 )
	{
		fillColorForNumbers = "#0069BF";
		sStrokeColor = "#FFA200";
	}
	else if( mapValue >= 1000000 &&  mapValue < 10000000 )
	{
		fillColorForNumbers = "#FFA200";
		nStrokeOpacity = 0.8;
		nFillOpacity = 0.7;
		sStrokeColor = "#FF2A00";
	}
	else if( mapValue >= 10000000 )
	{
		fillColorForNumbers = "#FF2A00";
		nStrokeOpacity = 0.9;
		nFillOpacity = 0.8;
		sStrokeColor = "#6F390D";
	}
	var circleOptions = {
		strokeColor: sStrokeColor,
		strokeOpacity: nStrokeOpacity,
		strokeWeight: 2,
		fillColor: fillColorForNumbers,
		fillOpacity: nFillOpacity,
		map: map,
		center: pos,
		radius: displayRadius
	};
	entityCircle = new google.maps.Circle(circleOptions);
	var infowindow = new google.maps.InfoWindow({
    		content: desc
	});
	infowindow.setPosition(entityCircle.getCenter());
	local_circleArray.push(entityCircle);
	google.maps.event.addListener(entityCircle, 'click', function() {
				infowindow.open(map);
	});

}


function initializeSlider() {
	var sliderElement = document.getElementById('slider');
	slider = new goog.ui.Slider;
	slider.decorate(sliderElement);
	slider.setMaximum(400);
	slider.setStep(1);
	slider.addEventListener(goog.ui.Component.EventType.CHANGE, function() {
	// Avoid updating the map too often by ignoring slider value changes
	// that occur within 200mS of eachother.
	if (sliderTimer) window.clearTimeout(sliderTimer);
	sliderTimer = window.setTimeout(updateMap, 500);

	var mapValue = sliderValueToAmount(slider.getValue());
	mapValue = mapValue*1000;
	var fillColorForNumbers = "#D6FF2F";
	if( mapValue < 1000 ) 
	{
		fillColorForNumbers = "#D6FF2F";
	}
	else if( mapValue >= 1000 &&  mapValue < 10000 )
	{
		fillColorForNumbers = "#00AF07";
	}
	else if( mapValue >= 10000 &&  mapValue < 100000 )
	{
		fillColorForNumbers = "#00ECFF";
	}
	else if( mapValue >= 100000 &&  mapValue < 1000000 )
	{
		fillColorForNumbers = "#0069BF";
	}
	else if( mapValue >= 1000000 &&  mapValue < 10000000 )
	{
		fillColorForNumbers = "#FFA200";
	}
	else if( mapValue >= 10000000 )
	{
		fillColorForNumbers = "#FF2A00";
	}

	document.getElementById("slider-value").innerHTML = "<span style='font-weight: bold; color:"+fillColorForNumbers+";'>"+Math.round(slider.getValue()*slider.getValue()/10) + " k </span>";
	});
	slider.setValue(0);
}

function updateMap() {
	var amount = sliderValueToAmount(slider.getValue());
	fusion_value = amount*1000;
	clearOverlays();
	refreshMapCluster();
	
}

function sliderValueToAmount(value) {
	return Math.round(value*value/10);
}

